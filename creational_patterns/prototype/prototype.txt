Prototype design pattern is used when the Object creation is a costly affair and requires a lot of time and 
resources and you have a similar object already existing. Prototype pattern provides a mechanism to copy the 
original object to a new object and then modify it according to our needs. Prototype design pattern uses 
java cloning to copy the object.

Problem
    Say we have an object, and we want to create an exact copy of it. How would we do it? First, we 
    have to create a new object of the same class. Then we have to go through all the fields of the 
    original object and copy their values over to the new object.

    Nice! But there’s a catch. Not all objects can be copied that way because some of the object’s fields 
    may be private and not visible from outside of the object itself.

    There’s one more problem with the direct approach. Since you have to know the object’s class to create 
    a duplicate, your code becomes dependent on that class. If the extra dependency doesn’t scare you, there’s 
    another catch. Sometimes you only know the interface that the object follows, but not its concrete class, 
    when, for example, a parameter in a method accepts any objects that follow some interface.


Solution
    The Prototype pattern delegates the cloning process to the actual objects that are being cloned. The pattern 
    declares a common interface for all objects that support cloning. This interface lets you clone an object 
    without coupling your code to the class of that object. Usually, such an interface contains just a single clone 
    method.

    The implementation of the clone method is very similar in all classes. The method creates an object of the current 
    class and carries over all of the field values of the old object into the new one. You can even copy private fields 
    because most programming languages let objects access private fields of other objects that belong to the same class.

    An object that supports cloning is called a prototype. When your objects have dozens of fields and hundreds of possible 
    configurations, cloning them might serve as an alternative to subclassing.

    Here’s how it works: you create a set of objects, configured in various ways. When you need an object like the one you’ve 
    configured, you just clone a prototype instead of constructing a new object from scratch.


All prototype classes should have a common interface that makes it possible to copy objects even if their concrete classes 
are unknown. Prototype objects can produce full copies since objects of the same class can access each other’s private fields.