The main purpose of refactoring is to fight technical debt. It transforms a mess into clean code 
and simple design.

Clean code is obvious for other programmers.
    Its not about super sophisticated algorithms. Poor variable naming, bloated classes and methods, 
    magic numbers -you name it- all of that makes code sloppy and difficult to understand.

Clean code doesn’t contain duplication.
    Each time you have to make a change in a duplicate code, you have to remember to make the same 
    change to every instance. This increases the cognitive load and slows down the progress.

Clean code contains a minimal number of classes and other moving parts.
    Less code is less maintenance, fewer bugs. Code is liability, keep it short and simple.

Clean code passes all tests.

Clean code is easier and cheaper to maintain!


The metaphor of “technical debt” in regards to unclean code was originally suggested by Ward 
Cunningham.

If you get a loan from a bank, this allows you to make purchases faster. You pay extra for expediting 
the process - you don’t just pay off the principal, but also the additional interest on the loan. 
Needless to say, you can even rack up so much interest that the amount of interest exceeds your 
total income, making full repayment impossible.

The same thing can happen with code. You can temporarily speed up without writing tests for new 
features, but this will gradually slow your progress every day until you eventually pay off the 
debt by writing tests.

When to refactor
    Rule of Three

        When you’re doing something for the first time, just get it done.

        When you’re doing something similar for the second time, cringe at having to repeat but do 
        the same thing anyway.

        When you’re doing something for the third time, start refactoring.


    When adding a feature
        Refactoring helps you understand other people’s code. If you have to deal with someone else’s 
        dirty code, try to refactor it first. Clean code is much easier to grasp. 
        
        Refactoring makes it easier to add new features. It’s much easier to make changes in clean code.